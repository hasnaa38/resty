{"version":3,"sources":["components/header/index.js","components/footer/index.js","components/form/index.js","components/results/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Footer","Form","props","handleApiCall","useState","method","setMethod","onSubmit","e","preventDefault","formData","url","target","value","body","console","log","className","name","type","onClick","id","Results","data","JSON","stringify","undefined","App","setData","requestParams","setRequestParams","callApi","a","newResponse","newCount","axios","get","then","response","headers","length","count","results","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sVAIe,SAASA,IACtB,OACE,iCACE,yC,MCJS,SAASC,IACtB,OACE,+C,MCFW,SAASC,EAAKC,GAC3B,IAAKC,EAAiBD,EAAjBC,cACL,EAA0BC,mBAAS,OAAnC,mBAAKC,EAAL,KAAaC,EAAb,KAWA,OACE,mCACE,uBAAM,cAAY,cAAcC,SAZjB,SAACC,GAClBA,EAAEC,iBACF,IAAIC,EAAW,CACbL,OAAQA,EACRM,IAAKH,EAAEI,OAAOD,IAAIE,MAClBC,KAAMN,EAAEI,OAAOE,KAAKD,OAEtBE,QAAQC,IAAIN,GACZP,EAAcO,IAIZ,UACE,wBAAOO,UAAU,aAAjB,UACE,yCACA,uBAAOC,KAAK,MAAMC,KAAK,SACvB,0BAAUD,KAAK,OAAOC,KAAK,OAA3B,uBACA,wBAAQA,KAAK,SAAb,oBAEF,wBAAOF,UAAU,UAAjB,UACE,sBAAMG,QAAS,WAAKd,EAAU,QAASe,GAAG,MAA1C,iBACA,sBAAMD,QAAS,WAAKd,EAAU,SAAUe,GAAG,OAA3C,kBACA,sBAAMD,QAAS,WAAKd,EAAU,QAASe,GAAG,MAA1C,iBACA,sBAAMD,QAAS,WAAKd,EAAU,WAAYe,GAAG,SAA7C,4B,MC1BK,SAASC,EAAQpB,GAC9B,IAAKqB,EAAQrB,EAARqB,KACL,OACE,kCACE,qBAAK,cAAY,gBAAjB,SAAmCA,EAAMC,KAAKC,UAAUF,OAAMG,EAAW,GAAK,cCCrE,SAASC,IACtB,MAAsBvB,mBAAS,MAA/B,mBAAKmB,EAAL,KAAWK,EAAX,KACA,EAAwCxB,mBAAS,IAAjD,mBAAKyB,EAAL,KAAoBC,EAApB,KAEIC,EAAO,uCAAG,WAAOF,GAAP,iBAAAG,EAAA,6DACZF,EAAiBD,GACbI,EAAc,GACdC,EAAW,EAHH,SAINC,IAAMC,IAAN,UAAaP,EAAclB,MAAO0B,MAAK,SAAAC,GAC3CL,EAAc,CACZM,QAASD,EAASC,QAClBzB,KAAMwB,EAASf,MAEjBW,EAAWD,EAAYnB,KAAK0B,UATlB,OAgBZZ,EAJa,CACXa,MAAOP,EACPQ,QAAST,IAdC,2CAAH,sDAmBX,OACE,eAAC,IAAMU,SAAP,WACE,cAAC5C,EAAD,IACA,sBAAK,cAAY,SAASkB,UAAU,UAApC,6BAA+DY,EAAcxB,UAC7E,sBAAKY,UAAU,UAAf,kBAA+BY,EAAclB,OAC7C,cAACV,EAAD,CAAME,cAAe4B,IACrB,cAACT,EAAD,CAASC,KAAMA,IACf,cAACvB,EAAD,OCtCN,IAYe4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b0531ef0.chunk.js","sourcesContent":["// import { render } from 'node-sass';\nimport React from 'react';\nimport './header.scss';\n\nexport default function Header() {\n  return (\n    <header>\n      <h1>RESTy</h1>\n    </header>\n  )\n}\n","import React from 'react';\nimport './footer.scss';\n\nexport default function Footer(){\n  return(\n    <footer>&copy; 2021</footer>\n  )\n}","import React, { useState } from 'react';\nimport './form.scss';\n\nexport default function Form(props) {\n  let {handleApiCall} = props;\n  let [method, setMethod] = useState('get');\n  let handleSubmit = (e) => {\n    e.preventDefault();\n    let formData = {\n      method: method,\n      url: e.target.url.value,\n      body: e.target.body.value\n    };\n    console.log(formData);\n    handleApiCall(formData);\n  }\n  return (\n    <>\n      <form data-testid='form-submit' onSubmit={handleSubmit}>\n        <label className='inputLabel'>\n          <span>URL: </span>\n          <input name='url' type='text' />\n          <textarea name='body' type='text'>JSON body</textarea>\n          <button type='submit'>GO!</button>\n        </label>\n        <label className='methods'>\n          <span onClick={()=>{setMethod('get')}} id='get'>GET</span>\n          <span onClick={()=>{setMethod('post')}} id='post'>POST</span>\n          <span onClick={()=>{setMethod('put')}} id='put'>PUT</span>\n          <span onClick={()=>{setMethod('delete')}} id='delete'>DELETE</span>\n        </label>\n      </form>\n    </>\n  )\n}","import React from 'react';\nimport './results.scss';\n\nexport default function Results(props){\n  let {data} = props;\n  return(\n    <section>\n      <pre data-testid='submit-result' >{data? JSON.stringify(data, undefined, 2) : 'loading'}</pre>\n    </section>\n  );\n}","import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.scss';\nimport Header from './components/header/index';\nimport Footer from './components/footer/index';\nimport Form from './components/form/index';\nimport Results from './components/results/index';\n\nexport default function App() {\n  let [data, setData] = useState(null);\n  let [requestParams, setRequestParams] = useState({});\n\n  let callApi = async (requestParams) => {\n    setRequestParams(requestParams);\n    let newResponse = {};\n    let newCount = 0;\n    await axios.get(`${requestParams.url}`).then(response => {\n      newResponse = {\n        headers: response.headers,\n        body: response.data\n      };\n      newCount = newResponse.body.length;\n    });\n    // mock output\n    const data = {\n      count: newCount,\n      results: newResponse,\n    };\n    setData(data);\n  }\n\n  return (\n    <React.Fragment>\n      <Header />\n      <div data-testid='method' className='textDev'>Request Method: {requestParams.method}</div>\n      <div className='textDev'>URL: {requestParams.url}</div>\n      <Form handleApiCall={callApi} />\n      <Results data={data} />\n      <Footer />\n    </React.Fragment>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}